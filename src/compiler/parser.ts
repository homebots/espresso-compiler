import { InstructionNode, ValueType } from './types';

// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.1.1 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

('use strict');

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
}

export interface ILiteralExpectation {
  type: 'literal';
  text: string;
  ignoreCase: boolean;
}

export type IClassParts = Array<string | IClassParts>;

export interface IClassExpectation {
  type: 'class';
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: 'any';
}

export interface IEndExpectation {
  type: 'end';
}

export interface IOtherExpectation {
  type: 'other';
  description: string;
}

export type Expectation =
  | ILiteralExpectation
  | IClassExpectation
  | IAnyExpectation
  | IEndExpectation
  | IOtherExpectation;

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch));
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch));
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case 'literal':
          return '"' + literalEscape(expectation.text) + '"';
        case 'class':
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + '-' + classEscape(part[1] as string)
              : classEscape(part);
          });

          return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
        case 'any':
          return 'any character';
        case 'end':
          return 'end of input';
        case 'other':
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + ' or ' + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? '"' + literalEscape(found1) + '"' : 'end of input';
    }

    return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof (Object as any).setPrototypeOf === 'function') {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === 'function') {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};

  const peg$startRuleFunctions: { [id: string]: any } = { Program: peg$parseProgram };
  let peg$startRuleFunction: () => any = peg$parseProgram;

  const peg$c0 = 'io write';
  const peg$c1 = peg$literalExpectation('io write', false);
  const peg$c2 = function (pin: any, value: any): any {
    return InstructionNode.create('ioWrite', { pin, value });
  };
  const peg$c3 = 'io read';
  const peg$c4 = peg$literalExpectation('io read', false);
  const peg$c5 = function (target: any, pin: any): any {
    return InstructionNode.create('ioRead', { pin, target });
  };
  const peg$c6 = 'io mode';
  const peg$c7 = peg$literalExpectation('io mode', false);
  const peg$c8 = function (pin: any, mode: any): any {
    return InstructionNode.create('ioMode', { pin, mode });
  };
  const peg$c9 = 'io type';
  const peg$c10 = peg$literalExpectation('io type', false);
  const peg$c11 = function (pin: any, pinType: any): any {
    return InstructionNode.create('ioType', { pin, pinType });
  };
  const peg$c12 = 'io all out';
  const peg$c13 = peg$literalExpectation('io all out', false);
  const peg$c14 = function (): any {
    return InstructionNode.create('ioAllOut');
  };
  const peg$c15 = function (destination: any, source: any): any {
    return InstructionNode.create('memoryCopy', { source, destination });
  };
  const peg$c16 = 'get';
  const peg$c17 = peg$literalExpectation('get', false);
  const peg$c18 = function (target: any, address: any): any {
    return InstructionNode.create('memoryGet', { target, address });
  };
  const peg$c19 = 'set';
  const peg$c20 = peg$literalExpectation('set', false);
  const peg$c21 = function (target: any, value: any): any {
    return InstructionNode.create('memorySet', { target, value });
  };
  const peg$c22 = function (c: any): any {
    return c;
  };
  const peg$c23 = peg$otherExpectation('statement');
  const peg$c24 = ';';
  const peg$c25 = peg$literalExpectation(';', false);
  const peg$c26 = peg$otherExpectation('comment');
  const peg$c27 = '//';
  const peg$c28 = peg$literalExpectation('//', false);
  const peg$c29 = /^[^\n]/;
  const peg$c30 = peg$classExpectation(['\n'], true, false);
  const peg$c31 = function (): any {
    return [];
  };
  const peg$c32 = '=';
  const peg$c33 = peg$literalExpectation('=', false);
  const peg$c34 = function (target: any, value: any): any {
    return InstructionNode.create('assign', { target, value });
  };
  const peg$c35 = 'not';
  const peg$c36 = peg$literalExpectation('not', false);
  const peg$c37 = function (target: any, value: any): any {
    return InstructionNode.create('not', { target, value });
  };
  const peg$c38 = 'inc';
  const peg$c39 = peg$literalExpectation('inc', false);
  const peg$c40 = 'dec';
  const peg$c41 = peg$literalExpectation('dec', false);
  const peg$c42 = function (operator: any, target: any): any {
    return InstructionNode.create('unaryOperation', { operator, target });
  };
  const peg$c43 = function (target: any, a: any, operator: any, b: any): any {
    return InstructionNode.create('binaryOperation', { operator, target, a, b });
  };
  const peg$c44 = '>=';
  const peg$c45 = peg$literalExpectation('>=', false);
  const peg$c46 = '>';
  const peg$c47 = peg$literalExpectation('>', false);
  const peg$c48 = '<=';
  const peg$c49 = peg$literalExpectation('<=', false);
  const peg$c50 = '<';
  const peg$c51 = peg$literalExpectation('<', false);
  const peg$c52 = '==';
  const peg$c53 = peg$literalExpectation('==', false);
  const peg$c54 = '!=';
  const peg$c55 = peg$literalExpectation('!=', false);
  const peg$c56 = 'xor';
  const peg$c57 = peg$literalExpectation('xor', false);
  const peg$c58 = 'and';
  const peg$c59 = peg$literalExpectation('and', false);
  const peg$c60 = 'or';
  const peg$c61 = peg$literalExpectation('or', false);
  const peg$c62 = '+';
  const peg$c63 = peg$literalExpectation('+', false);
  const peg$c64 = '-';
  const peg$c65 = peg$literalExpectation('-', false);
  const peg$c66 = '*';
  const peg$c67 = peg$literalExpectation('*', false);
  const peg$c68 = '/';
  const peg$c69 = peg$literalExpectation('/', false);
  const peg$c70 = '%';
  const peg$c71 = peg$literalExpectation('%', false);
  const peg$c72 = function (dataType: any, name: any, value: any): any {
    return InstructionNode.create('declareIdentifier', { name, dataType, value });
  };
  const peg$c73 = function (value: any): any {
    return InstructionNode.create('identifierValue', { value, dataType: ValueType.Identifier });
  };
  const peg$c74 = function (value: any): any {
    return InstructionNode.create('byteValue', { value, dataType: ValueType.Pin });
  };
  const peg$c75 = function (value: any): any {
    return InstructionNode.create('byteValue', { value, dataType: ValueType.Byte });
  };
  const peg$c76 = function (value: any): any {
    return InstructionNode.create('numberValue', { value, dataType: ValueType.Address });
  };
  const peg$c77 = function (value: any): any {
    return InstructionNode.create('numberValue', { value, dataType: ValueType.Integer });
  };
  const peg$c78 = function (value: any): any {
    return InstructionNode.create('numberValue', { value, dataType: ValueType.SignedInteger });
  };
  const peg$c79 = function (value: any): any {
    return InstructionNode.create('stringValue', { value, dataType: ValueType.String });
  };
  const peg$c80 = 'null';
  const peg$c81 = peg$literalExpectation('null', false);
  const peg$c82 = function (): any {
    return InstructionNode.create('byteValue', { value: 0, dataType: ValueType.Null });
  };
  const peg$c83 = peg$otherExpectation('value');
  const peg$c84 = peg$otherExpectation('system instruction');
  const peg$c85 = 'halt';
  const peg$c86 = peg$literalExpectation('halt', false);
  const peg$c87 = function (): any {
    return InstructionNode.create('halt');
  };
  const peg$c88 = 'restart';
  const peg$c89 = peg$literalExpectation('restart', false);
  const peg$c90 = function (): any {
    return InstructionNode.create('restart');
  };
  const peg$c91 = 'noop';
  const peg$c92 = peg$literalExpectation('noop', false);
  const peg$c93 = function (): any {
    return InstructionNode.create('noop');
  };
  const peg$c94 = 'sysinfo';
  const peg$c95 = peg$literalExpectation('sysinfo', false);
  const peg$c96 = function (): any {
    return InstructionNode.create('systemInfo');
  };
  const peg$c97 = 'dump';
  const peg$c98 = peg$literalExpectation('dump', false);
  const peg$c99 = function (): any {
    return InstructionNode.create('dump');
  };
  const peg$c100 = 'debug';
  const peg$c101 = peg$literalExpectation('debug', false);
  const peg$c102 = function (value: any): any {
    return InstructionNode.create('debug', { value });
  };
  const peg$c103 = 'print';
  const peg$c104 = peg$literalExpectation('print', false);
  const peg$c105 = function (value: any): any {
    return InstructionNode.create('print', { value });
  };
  const peg$c106 = 'delay';
  const peg$c107 = peg$literalExpectation('delay', false);
  const peg$c108 = function (value: any): any {
    return InstructionNode.create('delay', { value });
  };
  const peg$c109 = 'sleep';
  const peg$c110 = peg$literalExpectation('sleep', false);
  const peg$c111 = function (value: any): any {
    return InstructionNode.create('sleep', { value });
  };
  const peg$c112 = 'yield';
  const peg$c113 = peg$literalExpectation('yield', false);
  const peg$c114 = function (value: any): any {
    return InstructionNode.create('yield', { value });
  };
  const peg$c115 = 'jump';
  const peg$c116 = peg$literalExpectation('jump', false);
  const peg$c117 = 'to';
  const peg$c118 = peg$literalExpectation('to', false);
  const peg$c119 = function (address: any): any {
    return InstructionNode.create('jumpTo', { address });
  };
  const peg$c120 = 'label';
  const peg$c121 = peg$literalExpectation('label', false);
  const peg$c122 = function (label: any): any {
    return InstructionNode.create('jumpTo', { label });
  };
  const peg$c123 = 'if';
  const peg$c124 = peg$literalExpectation('if', false);
  const peg$c125 = 'then';
  const peg$c126 = peg$literalExpectation('then', false);
  const peg$c127 = function (condition: any, address: any): any {
    return InstructionNode.create('jumpIf', { condition, address });
  };
  const peg$c128 = function (condition: any, label: any): any {
    return InstructionNode.create('jumpIf', { condition, label });
  };
  const peg$c129 = peg$otherExpectation('hexadecimal');
  const peg$c130 = /^[0-9a-f]/;
  const peg$c131 = peg$classExpectation(
    [
      ['0', '9'],
      ['a', 'f'],
    ],
    false,
    false,
  );
  const peg$c132 = peg$otherExpectation('byte hex');
  const peg$c133 = function (): any {
    return text();
  };
  const peg$c134 = peg$otherExpectation('Byte');
  const peg$c135 = 'h';
  const peg$c136 = peg$literalExpectation('h', false);
  const peg$c137 = function (a: any, b: any): any {
    return parseInt(a + b, 16);
  };
  const peg$c138 = /^[ \t]/;
  const peg$c139 = peg$classExpectation([' ', '\t'], false, false);
  const peg$c140 = peg$otherExpectation('space');
  const peg$c141 = peg$otherExpectation('new line');
  const peg$c142 = /^[\n]/;
  const peg$c143 = peg$classExpectation(['\n'], false, false);
  const peg$c144 = peg$otherExpectation('separator');
  const peg$c145 = ',';
  const peg$c146 = peg$literalExpectation(',', false);
  const peg$c147 = peg$otherExpectation('0..9');
  const peg$c148 = /^[0-9]/;
  const peg$c149 = peg$classExpectation([['0', '9']], false, false);
  const peg$c150 = peg$otherExpectation('1..9');
  const peg$c151 = /^[1-9]/;
  const peg$c152 = peg$classExpectation([['1', '9']], false, false);
  const peg$c153 = peg$otherExpectation('a-z');
  const peg$c154 = /^[a-z]/i;
  const peg$c155 = peg$classExpectation([['a', 'z']], false, true);
  const peg$c156 = peg$otherExpectation('a-z or 0-9');
  const peg$c157 = /^[a-z0-9]/i;
  const peg$c158 = peg$classExpectation(
    [
      ['a', 'z'],
      ['0', '9'],
    ],
    false,
    true,
  );
  const peg$c159 = peg$otherExpectation('pin mode');
  const peg$c160 = /^[0-3]/;
  const peg$c161 = peg$classExpectation([['0', '3']], false, false);
  const peg$c162 = function (mode: any): any {
    return Number(mode);
  };
  const peg$c163 = 'true';
  const peg$c164 = peg$literalExpectation('true', false);
  const peg$c165 = '1';
  const peg$c166 = peg$literalExpectation('1', false);
  const peg$c167 = function (): any {
    return 1;
  };
  const peg$c168 = 'false';
  const peg$c169 = peg$literalExpectation('false', false);
  const peg$c170 = '0';
  const peg$c171 = peg$literalExpectation('0', false);
  const peg$c172 = function (): any {
    return 0;
  };
  const peg$c173 = peg$otherExpectation('integer');
  const peg$c174 = function (): any {
    return parseInt(text());
  };
  const peg$c175 = function (signal: any, int: any): any {
    return int * (signal === '-' ? -1 : 1);
  };
  const peg$c176 = peg$otherExpectation('string');
  const peg$c177 = "'";
  const peg$c178 = peg$literalExpectation("'", false);
  const peg$c179 = peg$anyExpectation();
  const peg$c180 = function (string: any): any {
    return string.map((s) => s[1]);
  };
  const peg$c181 = peg$otherExpectation('address');
  const peg$c182 = '0x';
  const peg$c183 = peg$literalExpectation('0x', false);
  const peg$c184 = function (a: any, b: any, c: any, d: any): any {
    return parseInt(a + b + c + d, 16);
  };
  const peg$c185 = peg$otherExpectation('pin');
  const peg$c186 = 'pin ';
  const peg$c187 = peg$literalExpectation('pin ', false);
  const peg$c188 = '10';
  const peg$c189 = peg$literalExpectation('10', false);
  const peg$c190 = '11';
  const peg$c191 = peg$literalExpectation('11', false);
  const peg$c192 = '12';
  const peg$c193 = peg$literalExpectation('12', false);
  const peg$c194 = '13';
  const peg$c195 = peg$literalExpectation('13', false);
  const peg$c196 = '14';
  const peg$c197 = peg$literalExpectation('14', false);
  const peg$c198 = '15';
  const peg$c199 = peg$literalExpectation('15', false);
  const peg$c200 = function (pin: any): any {
    return Number(pin);
  };
  const peg$c201 = /^[a-z]/;
  const peg$c202 = peg$classExpectation([['a', 'z']], false, false);
  const peg$c203 = /^[a-zA-Z0-9_]/;
  const peg$c204 = peg$classExpectation([['a', 'z'], ['A', 'Z'], ['0', '9'], '_'], false, false);
  const peg$c205 = '@';
  const peg$c206 = peg$literalExpectation('@', false);
  const peg$c207 = function (label: any): any {
    return InstructionNode.create('defineLabel', { label });
  };
  const peg$c208 = function (label: any): any {
    return InstructionNode.create('label', { label });
  };
  const peg$c209 = peg$otherExpectation('identifier');
  const peg$c210 = '$';
  const peg$c211 = peg$literalExpectation('$', false);
  const peg$c212 = function (head: any, tail: any): any {
    return text();
  };
  const peg$c213 = '_';
  const peg$c214 = peg$literalExpectation('_', false);
  const peg$c215 = function (name: any): any {
    return InstructionNode.create('useIdentifier', { name });
  };
  const peg$c216 = 'byte';
  const peg$c217 = peg$literalExpectation('byte', false);
  const peg$c218 = function (): any {
    return ValueType.Byte;
  };
  const peg$c219 = 'boolean';
  const peg$c220 = peg$literalExpectation('boolean', false);
  const peg$c221 = 'address';
  const peg$c222 = peg$literalExpectation('address', false);
  const peg$c223 = function (): any {
    return ValueType.Address;
  };
  const peg$c224 = 'uint';
  const peg$c225 = peg$literalExpectation('uint', false);
  const peg$c226 = function (): any {
    return ValueType.Integer;
  };
  const peg$c227 = 'int';
  const peg$c228 = peg$literalExpectation('int', false);
  const peg$c229 = function (): any {
    return ValueType.SignedInteger;
  };
  const peg$c230 = 'string';
  const peg$c231 = peg$literalExpectation('string', false);
  const peg$c232 = function (): any {
    return ValueType.String;
  };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: { [id: number]: ICached } = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1,
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: 'literal', text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: 'any' };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: 'end' };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: 'other', description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], '', location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
  }

  function peg$parseIoInstruction(): any {
    let s0;

    const key = peg$currPos * 74 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseIoWrite();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseIoRead();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseIoMode();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseIoType();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseIoAllOut();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoWrite(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c1);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsePin();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseIoValue();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c2(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoRead(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c4);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIdentifierValue();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parsePin();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c5(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoMode(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsePin();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parsePinMode();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoType(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c10);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsePin();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseDigit();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c11(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoAllOut(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c13);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIoValue(): any {
    let s0;

    const key = peg$currPos * 74 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseByteValue();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseIdentifierValue();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseBooleanValue();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMemoryInstruction(): any {
    let s0;

    const key = peg$currPos * 74 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseMemoryGet();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseMemorySet();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseMemoryCopy();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMemoryCopy(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAddressValue();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseASSIGN();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseAddressValue();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMemoryGet(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c17);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIdentifierValue();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseAddressValue();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c18(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMemorySet(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c20);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseAddressValue();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseValue();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProgram(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLine();
    while ((s2 as any) !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseLine();
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLine(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSpaces();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseStatement();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseStatementSeparator();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c23);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStatementSeparator(): any {
    let s0;

    const key = peg$currPos * 74 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseNewLine();
    if ((s0 as any) === peg$FAILED) {
      s0 = null;
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c24;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c25);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        s0 = null;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStatement(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseDefineLabel();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseSystemInstruction();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseMemoryInstruction();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseOperator();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseIoInstruction();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseComment();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c23);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseComment(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;

    const key = peg$currPos * 74 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c27) {
      s2 = peg$c27;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c28);
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      s3 = [];
      if (peg$c29.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c30);
        }
      }
      if ((s4 as any) !== peg$FAILED) {
        while ((s4 as any) !== peg$FAILED) {
          s3.push(s4);
          if (peg$c29.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c30);
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c31();
    }
    s0 = s1;
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c26);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOperator(): any {
    let s0;

    const key = peg$currPos * 74 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseBinaryOperation();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseUnaryOperation();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseDeclareIdentifier();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseAssign();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseASSIGN(): any {
    let s0;

    const key = peg$currPos * 74 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c33);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAssign(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIdentifierValue();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseASSIGN();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseValue();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUnaryOperation(): any {
    let s0;

    const key = peg$currPos * 74 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsenot();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parsestep();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenot(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;
    let s6;
    let s7;

    const key = peg$currPos * 74 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIdentifierValue();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseASSIGN();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c35) {
              s5 = peg$c35;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c36);
              }
            }
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parseSpaces();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parseValue();
                if ((s7 as any) !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c37(s1, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestep(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c39);
      }
    }
    if ((s1 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIdentifierValue();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBinaryOperation(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;
    let s6;
    let s7;
    let s8;
    let s9;

    const key = peg$currPos * 74 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIdentifierValue();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseASSIGN();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseValue();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parseSpaces();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parseBinaryOperator();
                if ((s7 as any) !== peg$FAILED) {
                  s8 = peg$parseSpaces();
                  if ((s8 as any) !== peg$FAILED) {
                    s9 = peg$parseValue();
                    if ((s9 as any) !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c43(s1, s5, s7, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBinaryOperator(): any {
    let s0;

    const key = peg$currPos * 74 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c45);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c46;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c47);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s0 = peg$c48;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c49);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c50;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c51);
            }
          }
          if ((s0 as any) === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c52) {
              s0 = peg$c52;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c53);
              }
            }
            if ((s0 as any) === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c54) {
                s0 = peg$c54;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c55);
                }
              }
              if ((s0 as any) === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c56) {
                  s0 = peg$c56;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c57);
                  }
                }
                if ((s0 as any) === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c58) {
                    s0 = peg$c58;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c59);
                    }
                  }
                  if ((s0 as any) === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c60) {
                      s0 = peg$c60;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c61);
                      }
                    }
                    if ((s0 as any) === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 43) {
                        s0 = peg$c62;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c63);
                        }
                      }
                      if ((s0 as any) === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                          s0 = peg$c64;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c65);
                          }
                        }
                        if ((s0 as any) === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 42) {
                            s0 = peg$c66;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c67);
                            }
                          }
                          if ((s0 as any) === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 47) {
                              s0 = peg$c68;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c69);
                              }
                            }
                            if ((s0 as any) === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 37) {
                                s0 = peg$c70;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c71);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDeclareIdentifier(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;
    let s6;
    let s7;

    const key = peg$currPos * 74 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseValueTypeMap();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseASSIGN();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parseSpaces();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parseValue();
                if ((s7 as any) !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c72(s1, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifierValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseUseIdentifier();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePinValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsePin();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBooleanValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBoolean();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseByteValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseByte();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAddressValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAddress();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c76(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIntegerValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c77(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSignedIntegerValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 31;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSignedInteger();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c78(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStringValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 32;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseString();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c79(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNullValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 33;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c81);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c82();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumberValue(): any {
    let s0;

    const key = peg$currPos * 74 + 34;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseIntegerValue();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseSignedIntegerValue();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseValue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 35;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseIdentifierValue();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseByteValue();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseAddressValue();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseNumberValue();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseStringValue();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseBooleanValue();
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parseNullValue();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c83);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSystemInstruction(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 36;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseHalt();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseRestart();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseSystemInfo();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseDebug();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseDump();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseNoop();
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parsePrint();
                if ((s0 as any) === peg$FAILED) {
                  s0 = peg$parseJumpTo();
                  if ((s0 as any) === peg$FAILED) {
                    s0 = peg$parseJumpIf();
                    if ((s0 as any) === peg$FAILED) {
                      s0 = peg$parseDelay();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c84);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHalt(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 37;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c86);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c87();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRestart(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 38;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c89);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNoop(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 39;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c91) {
      s1 = peg$c91;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c92);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c93();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSystemInfo(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 40;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c94) {
      s1 = peg$c94;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c95);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c96();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDump(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 41;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c98);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDebug(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 42;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c101);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseBoolean();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePrint(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 43;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c104);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseValue();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c105(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDelay(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 44;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c107);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIntegerValue();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c108(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c109) {
        s1 = peg$c109;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c110);
        }
      }
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if ((s2 as any) !== peg$FAILED) {
          s3 = peg$parseIntegerValue();
          if ((s3 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c111(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c112) {
          s1 = peg$c112;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c113);
          }
        }
        if ((s1 as any) !== peg$FAILED) {
          s2 = peg$parseSpaces();
          if ((s2 as any) !== peg$FAILED) {
            s3 = peg$parseIntegerValue();
            if ((s3 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c114(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseJumpTo(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;
    let s6;
    let s7;

    const key = peg$currPos * 74 + 45;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c115) {
      s1 = peg$c115;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c116);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c118);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseAddressValue();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c119(s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c116);
        }
      }
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if ((s2 as any) !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c117) {
            s3 = peg$c117;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c118);
            }
          }
          if ((s3 as any) !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if ((s4 as any) !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c120) {
                s5 = peg$c120;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c121);
                }
              }
              if ((s5 as any) !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if ((s6 as any) !== peg$FAILED) {
                  s7 = peg$parseLabel();
                  if ((s7 as any) !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c122(s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseJumpIf(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;
    let s6;
    let s7;
    let s8;
    let s9;
    let s10;
    let s11;
    let s12;
    let s13;

    const key = peg$currPos * 74 + 46;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c123) {
      s1 = peg$c123;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c124);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseValue();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if ((s4 as any) !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c125) {
              s5 = peg$c125;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c126);
              }
            }
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parseSpaces();
              if ((s6 as any) !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c115) {
                  s7 = peg$c115;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c116);
                  }
                }
                if ((s7 as any) !== peg$FAILED) {
                  s8 = peg$parseSpaces();
                  if ((s8 as any) !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c117) {
                      s9 = peg$c117;
                      peg$currPos += 2;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c118);
                      }
                    }
                    if ((s9 as any) !== peg$FAILED) {
                      s10 = peg$parseSpaces();
                      if ((s10 as any) !== peg$FAILED) {
                        s11 = peg$parseAddressValue();
                        if ((s11 as any) !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c127(s3, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c123) {
        s1 = peg$c123;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c124);
        }
      }
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if ((s2 as any) !== peg$FAILED) {
          s3 = peg$parseValue();
          if ((s3 as any) !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if ((s4 as any) !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c125) {
                s5 = peg$c125;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c126);
                }
              }
              if ((s5 as any) !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if ((s6 as any) !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c115) {
                    s7 = peg$c115;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c116);
                    }
                  }
                  if ((s7 as any) !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if ((s8 as any) !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c117) {
                        s9 = peg$c117;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c118);
                        }
                      }
                      if ((s9 as any) !== peg$FAILED) {
                        s10 = peg$parseSpaces();
                        if ((s10 as any) !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c120) {
                            s11 = peg$c120;
                            peg$currPos += 5;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c121);
                            }
                          }
                          if ((s11 as any) !== peg$FAILED) {
                            s12 = peg$parseSpaces();
                            if ((s12 as any) !== peg$FAILED) {
                              s13 = peg$parseLabel();
                              if ((s13 as any) !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c128(s3, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHexDigit(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 47;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$c130.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c131);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c129);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHexByte(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 48;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c133();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c132);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseByte(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 49;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 104) {
          s3 = peg$c135;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c136);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c137(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c134);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSpace(): any {
    let s0;

    const key = peg$currPos * 74 + 50;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c138.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c139);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSpaces(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 51;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSpace();
    while ((s1 as any) !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSpace();
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c140);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNewLine(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 52;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = [];
    if (peg$c142.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c143);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      while ((s1 as any) !== peg$FAILED) {
        s0.push(s1);
        if (peg$c142.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c143);
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c141);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSeparator(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 53;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c145;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c146);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if ((s2 as any) !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c144);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDigit(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 54;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$c148.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c149);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c147);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNonZeroDigit(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 55;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$c151.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c152);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c150);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAlpha(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 56;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$c154.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c155);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c153);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAlphanumeric(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 57;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$c157.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c158);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c156);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePinMode(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 58;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c160.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c161);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c162(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseTrue(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 59;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c163) {
      s1 = peg$c163;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c164);
      }
    }
    if ((s1 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 49) {
        s1 = peg$c165;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c166);
        }
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c167();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFalse(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 60;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c168) {
      s1 = peg$c168;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c169);
      }
    }
    if ((s1 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c170;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c172();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBoolean(): any {
    let s0;

    const key = peg$currPos * 74 + 61;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseTrue();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseFalse();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInteger(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 62;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c170;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c171);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c172();
    }
    s0 = s1;
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNonZeroDigit();
      if ((s1 as any) !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseSpace();
        peg$silentFails--;
        if ((s5 as any) === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parseDigit();
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while ((s3 as any) !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseSpace();
          peg$silentFails--;
          if ((s5 as any) === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseDigit();
            if ((s5 as any) !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if ((s2 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c174();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c173);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSignedInteger(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 63;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c65);
      }
    }
    if ((s1 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c62;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseInteger();
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c175(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseString(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 64;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c177;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c178);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c177;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c178);
        }
      }
      peg$silentFails--;
      if ((s5 as any) === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if ((s4 as any) !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c179);
          }
        }
        if ((s5 as any) !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c177;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c178);
          }
        }
        peg$silentFails--;
        if ((s5 as any) === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if ((s4 as any) !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c179);
            }
          }
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c177;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c178);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c180(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c176);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAddress(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;
    let s5;

    const key = peg$currPos * 74 + 65;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c182) {
      s1 = peg$c182;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c183);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseHexByte();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseHexByte();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseHexByte();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseHexByte();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c184(s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c181);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePin(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 66;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c186) {
      s1 = peg$c186;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c187);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseDigit();
      if ((s2 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c188) {
          s2 = peg$c188;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c189);
          }
        }
        if ((s2 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c190) {
            s2 = peg$c190;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c191);
            }
          }
          if ((s2 as any) === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c192) {
              s2 = peg$c192;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c193);
              }
            }
            if ((s2 as any) === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c194) {
                s2 = peg$c194;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c195);
                }
              }
              if ((s2 as any) === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c196) {
                  s2 = peg$c196;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c197);
                  }
                }
                if ((s2 as any) === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c198) {
                    s2 = peg$c198;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c199);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c200(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c185);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLabelText(): any {
    let s0;
    let s1;
    let s2;
    let s3;

    const key = peg$currPos * 74 + 67;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (peg$c201.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c202);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      if (peg$c203.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c204);
        }
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        if (peg$c203.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c204);
          }
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c133();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDefineLabel(): any {
    let s0;
    let s1;
    let s2;

    const key = peg$currPos * 74 + 68;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c205;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c206);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseLabelText();
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c207(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLabel(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 69;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLabelText();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c208(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifier(): any {
    let s0;
    let s1;
    let s2;
    let s3;
    let s4;

    const key = peg$currPos * 74 + 70;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c210;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c211);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseIdentifierChar();
      if ((s2 as any) !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseIdentifierChar();
        while ((s4 as any) !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseIdentifierChar();
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c212(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c209);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifierChar(): any {
    let s0;

    const key = peg$currPos * 74 + 71;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseAlphanumeric();
    if ((s0 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c210;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c211);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c213;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c214);
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUseIdentifier(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 72;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c215(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseValueTypeMap(): any {
    let s0;
    let s1;

    const key = peg$currPos * 74 + 73;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c216) {
      s1 = peg$c216;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c217);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c218();
    }
    s0 = s1;
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c219) {
        s1 = peg$c219;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c220);
        }
      }
      if ((s1 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c218();
      }
      s0 = s1;
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c221) {
          s1 = peg$c221;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c222);
          }
        }
        if ((s1 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c223();
        }
        s0 = s1;
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c224) {
            s1 = peg$c224;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c225);
            }
          }
          if ((s1 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c226();
          }
          s0 = s1;
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c227) {
              s1 = peg$c227;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c228);
              }
            }
            if ((s1 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c229();
            }
            s0 = s1;
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c230) {
                s1 = peg$c230;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c231);
                }
              }
              if ((s1 as any) !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c232();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
