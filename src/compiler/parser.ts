/* eslint-disable no-constant-condition */
import * as peg from 'pegjs';
import * as T from './types';
import { OpCodes } from './opcodes';
export default function (): peg.Parser {
  const module = { exports: null };
  /*
   * Generated by PEG.js 0.10.0.
   *
   * http://pegjs.org/
   */

  ('use strict');

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    const DESCRIBE_EXPECTATION_FNS = {
      literal: function (expectation) {
        return '"' + literalEscape(expectation.text) + '"';
      },

      class: function (expectation) {
        let escapedParts = '';
        let i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts +=
            expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
        }

        return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
      },

      any: function (expectation) {
        return 'any character';
      },

      end: function (expectation) {
        return 'end of input';
      },

      other: function (expectation) {
        return expectation.description;
      },
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) {
          return '\\x0' + hex(ch);
        })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
          return '\\x' + hex(ch);
        });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) {
          return '\\x0' + hex(ch);
        })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
          return '\\x' + hex(ch);
        });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = new Array(expected.length);
      let i;
      let j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + ' or ' + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? '"' + literalEscape(found) + '"' : 'end of input';
    }

    return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    const peg$FAILED = {};

    const peg$startRuleFunctions = { Program: peg$parseProgram };
    let peg$startRuleFunction = peg$parseProgram;

    const peg$c0 = function (c) {
      return c;
    };
    const peg$c1 = peg$otherExpectation('statement');
    const peg$c2 = 'fn';
    const peg$c3 = peg$literalExpectation('fn', false);
    const peg$c4 = function (label, args, body) {
      return T.FunctionBody.create(label, args, body);
    };
    const peg$c5 = '(';
    const peg$c6 = peg$literalExpectation('(', false);
    const peg$c7 = ')';
    const peg$c8 = peg$literalExpectation(')', false);
    const peg$c9 = function (args) {
      return args;
    };
    const peg$c10 = function (label, args) {
      return T.FunctionCall.create(label, args);
    };
    const peg$c11 = '{';
    const peg$c12 = peg$literalExpectation('{', false);
    const peg$c13 = '}';
    const peg$c14 = peg$literalExpectation('}', false);
    const peg$c15 = function (lines) {
      return T.Block.create(lines);
    };
    const peg$c16 = peg$otherExpectation('comment');
    const peg$c17 = '//';
    const peg$c18 = peg$literalExpectation('//', false);
    const peg$c19 = /^[^\n]/;
    const peg$c20 = peg$classExpectation(['\n'], true, false);
    const peg$c21 = function () {
      return [];
    };
    const peg$c22 = 'byte';
    const peg$c23 = peg$literalExpectation('byte', false);
    const peg$c24 = function (t) {
      return T.DeclareIdentifier.createByte(t);
    };
    const peg$c25 = 'int';
    const peg$c26 = peg$literalExpectation('int', false);
    const peg$c27 = function (t) {
      return T.DeclareIdentifier.createInteger(t);
    };
    const peg$c28 = 'uint';
    const peg$c29 = peg$literalExpectation('uint', false);
    const peg$c30 = 'string';
    const peg$c31 = peg$literalExpectation('string', false);
    const peg$c32 = function (t) {
      return T.DeclareIdentifier.createString(t);
    };
    const peg$c33 = peg$otherExpectation('system instruction');
    const peg$c34 = 'delay';
    const peg$c35 = peg$literalExpectation('delay', false);
    const peg$c36 = function (delay) {
      return [OpCodes.Delay, ...delay];
    };
    const peg$c37 = 'sleep';
    const peg$c38 = peg$literalExpectation('sleep', false);
    const peg$c39 = function (delay) {
      return [OpCodes.Sleep, ...delay];
    };
    const peg$c40 = 'halt';
    const peg$c41 = peg$literalExpectation('halt', false);
    const peg$c42 = function () {
      return [OpCodes.Halt];
    };
    const peg$c43 = 'restart';
    const peg$c44 = peg$literalExpectation('restart', false);
    const peg$c45 = function () {
      return [OpCodes.Restart];
    };
    const peg$c46 = 'noop';
    const peg$c47 = peg$literalExpectation('noop', false);
    const peg$c48 = function () {
      return [OpCodes.Noop];
    };
    const peg$c49 = 'jump';
    const peg$c50 = peg$literalExpectation('jump', false);
    const peg$c51 = 'to';
    const peg$c52 = peg$literalExpectation('to', false);
    const peg$c53 = function (address) {
      return [OpCodes.JumpTo, ...address];
    };
    const peg$c54 = function (label) {
      return [OpCodes.JumpTo, T.Placeholder.create(label), 0, 0, 0];
    };
    const peg$c55 = 'if';
    const peg$c56 = peg$literalExpectation('if', false);
    const peg$c57 = 'then';
    const peg$c58 = peg$literalExpectation('then', false);
    const peg$c59 = function (condition, label) {
      return [OpCodes.JumpIf, ...condition, T.Placeholder.create(label), 0, 0, 0];
    };
    const peg$c60 = 'yield';
    const peg$c61 = peg$literalExpectation('yield', false);
    const peg$c62 = function (delay) {
      return [OpCodes.Yield, ...delay];
    };
    const peg$c63 = 'sysinfo';
    const peg$c64 = peg$literalExpectation('sysinfo', false);
    const peg$c65 = function () {
      return [OpCodes.SystemInfo];
    };
    const peg$c66 = 'debug';
    const peg$c67 = peg$literalExpectation('debug', false);
    const peg$c68 = function (byte) {
      return [OpCodes.Debug, byte];
    };
    const peg$c69 = 'dump';
    const peg$c70 = peg$literalExpectation('dump', false);
    const peg$c71 = function () {
      return [OpCodes.Dump];
    };
    const peg$c72 = 'print';
    const peg$c73 = peg$literalExpectation('print', false);
    const peg$c74 = function (value) {
      return [OpCodes.Print, ...value];
    };
    const peg$c75 = 'get';
    const peg$c76 = peg$literalExpectation('get', false);
    const peg$c77 = function (target, address) {
      return [OpCodes.MemGet, ...target, ...address];
    };
    const peg$c78 = 'set';
    const peg$c79 = peg$literalExpectation('set', false);
    const peg$c80 = function (target, value) {
      return [OpCodes.MemSet, ...target, ...value];
    };
    const peg$c81 = 'copy';
    const peg$c82 = peg$literalExpectation('copy', false);
    const peg$c83 = function (target, address) {
      return [OpCodes.Copy, ...target, ...address];
    };
    const peg$c84 = '=';
    const peg$c85 = peg$literalExpectation('=', false);
    const peg$c86 = 'not';
    const peg$c87 = peg$literalExpectation('not', false);
    const peg$c88 = function (target, value) {
      return [0x13, ...target, ...value];
    };
    const peg$c89 = 'inc';
    const peg$c90 = peg$literalExpectation('inc', false);
    const peg$c91 = function (id) {
      return [OpCodes.Inc, ...id];
    };
    const peg$c92 = 'dec';
    const peg$c93 = peg$literalExpectation('dec', false);
    const peg$c94 = function (id) {
      return [OpCodes.Dec, ...id];
    };
    const peg$c95 = '>=';
    const peg$c96 = peg$literalExpectation('>=', false);
    const peg$c97 = function (target, a, b) {
      return [OpCodes.Gte, ...target, ...a, ...b];
    };
    const peg$c98 = '>';
    const peg$c99 = peg$literalExpectation('>', false);
    const peg$c100 = function (target, a, b) {
      return [OpCodes.Gt, ...target, ...a, ...b];
    };
    const peg$c101 = '<=';
    const peg$c102 = peg$literalExpectation('<=', false);
    const peg$c103 = function (target, a, b) {
      return [OpCodes.Lte, ...target, ...a, ...b];
    };
    const peg$c104 = '<';
    const peg$c105 = peg$literalExpectation('<', false);
    const peg$c106 = function (target, a, b) {
      return [OpCodes.Lt, ...target, ...a, ...b];
    };
    const peg$c107 = '==';
    const peg$c108 = peg$literalExpectation('==', false);
    const peg$c109 = function (target, a, b) {
      return [OpCodes.Equal, ...target, ...a, ...b];
    };
    const peg$c110 = '!=';
    const peg$c111 = peg$literalExpectation('!=', false);
    const peg$c112 = function (target, a, b) {
      return [OpCodes.NotEqual, ...target, ...a, ...b];
    };
    const peg$c113 = 'xor';
    const peg$c114 = peg$literalExpectation('xor', false);
    const peg$c115 = function (target, a, b) {
      return [OpCodes.Xor, ...target, ...a, ...b];
    };
    const peg$c116 = 'and';
    const peg$c117 = peg$literalExpectation('and', false);
    const peg$c118 = function (target, a, b) {
      return [OpCodes.And, ...target, ...a, ...b];
    };
    const peg$c119 = 'or';
    const peg$c120 = peg$literalExpectation('or', false);
    const peg$c121 = function (target, a, b) {
      return [OpCodes.Or, ...target, ...a, ...b];
    };
    const peg$c122 = '+';
    const peg$c123 = peg$literalExpectation('+', false);
    const peg$c124 = function (target, a, b) {
      return [OpCodes.Add, ...target, ...a, ...b];
    };
    const peg$c125 = '-';
    const peg$c126 = peg$literalExpectation('-', false);
    const peg$c127 = function (target, a, b) {
      return [OpCodes.Sub, ...target, ...a, ...b];
    };
    const peg$c128 = '*';
    const peg$c129 = peg$literalExpectation('*', false);
    const peg$c130 = function (target, a, b) {
      return [OpCodes.Mul, ...target, ...a, ...b];
    };
    const peg$c131 = '/';
    const peg$c132 = peg$literalExpectation('/', false);
    const peg$c133 = function (target, a, b) {
      return [OpCodes.Div, ...target, ...a, ...b];
    };
    const peg$c134 = '%';
    const peg$c135 = peg$literalExpectation('%', false);
    const peg$c136 = function (target, a, b) {
      return [OpCodes.Mod, ...target, ...a, ...b];
    };
    const peg$c137 = 'io write';
    const peg$c138 = peg$literalExpectation('io write', false);
    const peg$c139 = function (pin, value) {
      return [OpCodes.IoWrite, pin, ...value];
    };
    const peg$c140 = 'io read';
    const peg$c141 = peg$literalExpectation('io read', false);
    const peg$c142 = function (pin, value) {
      return [OpCodes.IoRead, pin, ...value];
    };
    const peg$c143 = 'io mode';
    const peg$c144 = peg$literalExpectation('io mode', false);
    const peg$c145 = function (pin, mode) {
      return [OpCodes.IoMode, pin, mode];
    };
    const peg$c146 = 'io type';
    const peg$c147 = peg$literalExpectation('io type', false);
    const peg$c148 = function (pin, type) {
      return [OpCodes.IoType, pin, type];
    };
    const peg$c149 = 'io allout';
    const peg$c150 = peg$literalExpectation('io allout', false);
    const peg$c151 = function () {
      return [OpCodes.IoAllOut];
    };
    const peg$c152 = 'net connect';
    const peg$c153 = peg$literalExpectation('net connect', false);
    const peg$c154 = function (net, pwd) {
      return [0x3a, ...net, ...pwd];
    };
    const peg$c155 = 'net disconnect';
    const peg$c156 = peg$literalExpectation('net disconnect', false);
    const peg$c157 = function () {
      return [0x3b];
    };
    const peg$c158 = 'net status';
    const peg$c159 = peg$literalExpectation('net status', false);
    const peg$c160 = function () {
      return [0x3c];
    };
    const peg$c161 = 'net list';
    const peg$c162 = peg$literalExpectation('net list', false);
    const peg$c163 = function () {
      return [0x3e];
    };
    const peg$c164 = 'i2setup';
    const peg$c165 = peg$literalExpectation('i2setup', false);
    const peg$c166 = function () {
      return [0x40];
    };
    const peg$c167 = 'i2start';
    const peg$c168 = peg$literalExpectation('i2start', false);
    const peg$c169 = function () {
      return [0x41];
    };
    const peg$c170 = 'i2stop';
    const peg$c171 = peg$literalExpectation('i2stop', false);
    const peg$c172 = function () {
      return [0x42];
    };
    const peg$c173 = 'i2write';
    const peg$c174 = peg$literalExpectation('i2write', false);
    const peg$c175 = function () {
      return [0x43];
    };
    const peg$c176 = 'i2read';
    const peg$c177 = peg$literalExpectation('i2read', false);
    const peg$c178 = function () {
      return [0x44];
    };
    const peg$c179 = 'i2setack';
    const peg$c180 = peg$literalExpectation('i2setack', false);
    const peg$c181 = function () {
      return [0x45];
    };
    const peg$c182 = 'i2getack';
    const peg$c183 = peg$literalExpectation('i2getack', false);
    const peg$c184 = function () {
      return [0x46];
    };
    const peg$c185 = 'i2find';
    const peg$c186 = peg$literalExpectation('i2find', false);
    const peg$c187 = function () {
      return [0x48];
    };
    const peg$c188 = 'i2writeack';
    const peg$c189 = peg$literalExpectation('i2writeack', false);
    const peg$c190 = function () {
      return [0x49];
    };
    const peg$c191 = 'i2writeack_b';
    const peg$c192 = peg$literalExpectation('i2writeack_b', false);
    const peg$c193 = function () {
      return [0x4a];
    };
    const peg$c194 = peg$otherExpectation('hexadecimal');
    const peg$c195 = /^[0-9A-Fa-f]/;
    const peg$c196 = peg$classExpectation(
      [
        ['0', '9'],
        ['A', 'F'],
        ['a', 'f'],
      ],
      false,
      false,
    );
    const peg$c197 = peg$otherExpectation('byte hex');
    const peg$c198 = function () {
      return text();
    };
    const peg$c199 = peg$otherExpectation('Byte');
    const peg$c200 = '0x';
    const peg$c201 = peg$literalExpectation('0x', false);
    const peg$c202 = function () {
      return parseInt(text(), 16);
    };
    const peg$c203 = /^[ \t]/;
    const peg$c204 = peg$classExpectation([' ', '\t'], false, false);
    const peg$c205 = peg$otherExpectation('space');
    const peg$c206 = peg$otherExpectation('new line');
    const peg$c207 = /^[\n]/;
    const peg$c208 = peg$classExpectation(['\n'], false, false);
    const peg$c209 = peg$otherExpectation('separator');
    const peg$c210 = ',';
    const peg$c211 = peg$literalExpectation(',', false);
    const peg$c212 = peg$otherExpectation('0..9');
    const peg$c213 = /^[0-9]/;
    const peg$c214 = peg$classExpectation([['0', '9']], false, false);
    const peg$c215 = peg$otherExpectation('1..9');
    const peg$c216 = /^[1-9]/;
    const peg$c217 = peg$classExpectation([['1', '9']], false, false);
    const peg$c218 = peg$otherExpectation('a-z');
    const peg$c219 = /^[a-z]/i;
    const peg$c220 = peg$classExpectation([['a', 'z']], false, true);
    const peg$c221 = peg$otherExpectation('a-z or 0-9');
    const peg$c222 = peg$otherExpectation('pin mode');
    const peg$c223 = /^[0-3]/;
    const peg$c224 = peg$classExpectation([['0', '3']], false, false);
    const peg$c225 = function (mode) {
      return Number(mode);
    };
    const peg$c226 = 'true';
    const peg$c227 = peg$literalExpectation('true', false);
    const peg$c228 = '1';
    const peg$c229 = peg$literalExpectation('1', false);
    const peg$c230 = function () {
      return 1;
    };
    const peg$c231 = 'false';
    const peg$c232 = peg$literalExpectation('false', false);
    const peg$c233 = '0';
    const peg$c234 = peg$literalExpectation('0', false);
    const peg$c235 = function () {
      return 0;
    };
    const peg$c236 = peg$otherExpectation('integer');
    const peg$c237 = function () {
      return parseInt(text());
    };
    const peg$c238 = function (int) {
      return -1 * int;
    };
    const peg$c239 = peg$otherExpectation('string');
    const peg$c240 = "'";
    const peg$c241 = peg$literalExpectation("'", false);
    const peg$c242 = peg$anyExpectation();
    const peg$c243 = function (string) {
      return string.map((s) => s[1]);
    };
    const peg$c244 = peg$otherExpectation('address');
    const peg$c245 = function (a, b, c, d) {
      return [d, c, b, a];
    };
    const peg$c246 = peg$otherExpectation('pin');
    const peg$c247 = 'pin ';
    const peg$c248 = peg$literalExpectation('pin ', false);
    const peg$c249 = '10';
    const peg$c250 = peg$literalExpectation('10', false);
    const peg$c251 = '11';
    const peg$c252 = peg$literalExpectation('11', false);
    const peg$c253 = '12';
    const peg$c254 = peg$literalExpectation('12', false);
    const peg$c255 = '13';
    const peg$c256 = peg$literalExpectation('13', false);
    const peg$c257 = '14';
    const peg$c258 = peg$literalExpectation('14', false);
    const peg$c259 = '15';
    const peg$c260 = peg$literalExpectation('15', false);
    const peg$c261 = function (pin) {
      return Number(pin);
    };
    const peg$c262 = /^[a-z]/;
    const peg$c263 = peg$classExpectation([['a', 'z']], false, false);
    const peg$c264 = /^[a-zA-Z0-9_]/;
    const peg$c265 = peg$classExpectation([['a', 'z'], ['A', 'Z'], ['0', '9'], '_'], false, false);
    const peg$c266 = '@';
    const peg$c267 = peg$literalExpectation('@', false);
    const peg$c268 = function (label) {
      return T.Reference.create(label);
    };
    const peg$c269 = peg$otherExpectation('identifier');
    const peg$c270 = '$';
    const peg$c271 = peg$literalExpectation('$', false);
    const peg$c272 = function (head, tail) {
      return text();
    };
    const peg$c273 = '_';
    const peg$c274 = peg$literalExpectation('_', false);
    const peg$c275 = function (name) {
      return T.IdentifierValue.create(name);
    };
    const peg$c276 = function (pin) {
      return T.PinValue.create(pin);
    };
    const peg$c277 = function (bool) {
      return T.ByteValue.create(bool);
    };
    const peg$c278 = function (byte) {
      return T.ByteValue.create(byte);
    };
    const peg$c279 = function (address) {
      return T.AddressValue.create(address);
    };
    const peg$c280 = function (number) {
      return T.IntegerValue.create(number);
    };
    const peg$c281 = function (number) {
      return T.SignedIntegerValue.create(number);
    };
    const peg$c282 = function (string) {
      return T.StringValue.create(string);
    };
    const peg$c283 = peg$otherExpectation('value');

    let peg$currPos = 0;
    let peg$savedPos = 0;
    const peg$posDetailsCache = [{ line: 1, column: 1 }];
    let peg$maxFailPos = 0;
    let peg$maxFailExpected = [];
    let peg$silentFails = 0;

    let peg$result;

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location,
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: 'literal', text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: 'any' };
    }

    function peg$endExpectation() {
      return { type: 'end' };
    }

    function peg$otherExpectation(description) {
      return { type: 'other', description: description };
    }

    function peg$computePosDetails(pos) {
      let details = peg$posDetailsCache[pos];
      let p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column,
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      const startPosDetails = peg$computePosDetails(startPos);
      const endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column,
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column,
        },
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parseProgram() {
      let s0;
      let s1;
      let s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseLine();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseLine();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLine() {
      let s0;
      let s1;
      let s2;
      let s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseSpaces();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNewLine();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c1);
        }
      }

      return s0;
    }

    function peg$parseFunction() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c3);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLabel();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseArguments();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBlock();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c4(s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArguments() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c6);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDeclareIdentifier();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDeclareIdentifier();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c8);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionCall() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;

      s0 = peg$currPos;
      s1 = peg$parseLabel();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c5;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseValue();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseValue();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c8);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBlock() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c12);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNewLine();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseLine();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseLine();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c13;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c14);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComment() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s2 = peg$c17;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c18);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c20);
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c19.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      return s0;
    }

    function peg$parseStatement() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = peg$parseDefineLabel();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSystemInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMemoryInstruction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOperator();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIoInstruction();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWifiInstruction();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseI2cInstruction();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseComment();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDeclareIdentifier();
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c1);
        }
      }

      return s0;
    }

    function peg$parseDeclareIdentifier() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c23);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c25) {
          s1 = peg$c25;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c26);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSpaces();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIdentifier();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c28) {
            s1 = peg$c28;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c29);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSpaces();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseIdentifier();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c30) {
              s1 = peg$c30;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSpaces();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseIdentifier();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c32(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSystemInstruction() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = peg$parsehalt();
      if (s0 === peg$FAILED) {
        s0 = peg$parserestart();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesysinfo();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedebug();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedump();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenoop();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseyield();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseprint();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsejump_to();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsejump_if();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsedelay();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c33);
        }
      }

      return s0;
    }

    function peg$parsedelay() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIntegerValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c37) {
          s1 = peg$c37;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c38);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSpaces();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIntegerValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsehalt() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c42();
      }
      s0 = s1;

      return s0;
    }

    function peg$parserestart() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c43) {
        s1 = peg$c43;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c44);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenoop() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c46) {
        s1 = peg$c46;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c47);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsejump_to() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c50);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c51) {
            s3 = peg$c51;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c52);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAddressValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c53(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c49) {
          s1 = peg$c49;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c50);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSpaces();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c51) {
              s3 = peg$c51;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c52);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSpaces();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseLabel();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c54(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsejump_if() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;
      let s10;
      let s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c56);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c57) {
                s5 = peg$c57;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c58);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c49) {
                    s7 = peg$c49;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c50);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c51) {
                        s9 = peg$c51;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c52);
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseSpaces();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseLabel();
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c59(s3, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseyield() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIntegerValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c62(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesysinfo() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c64);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c65();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedebug() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c67);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBoolean();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c68(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedump() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c70);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c71();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprint() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c72) {
        s1 = peg$c72;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c73);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c74(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMemoryInstruction() {
      let s0;

      s0 = peg$parsememget();
      if (s0 === peg$FAILED) {
        s0 = peg$parsememset();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecopy();
        }
      }

      return s0;
    }

    function peg$parsememget() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c75) {
        s1 = peg$c75;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c76);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAddressValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c77(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsememset() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c78) {
        s1 = peg$c78;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c79);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAddressValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c80(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecopy() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c81) {
        s1 = peg$c81;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c82);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAddressValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAddressValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c83(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOperator() {
      let s0;

      s0 = peg$parsexor();
      if (s0 === peg$FAILED) {
        s0 = peg$parseand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseor();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenot();
            if (s0 === peg$FAILED) {
              s0 = peg$parseinc();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedec();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseadd();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesub();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemul();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsediv();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsemod();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsegt();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsegte();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselt();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parselte();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseequal();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsenotequal();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseASSIGN() {
      let s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c84;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c85);
        }
      }

      return s0;
    }

    function peg$parsenot() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c87);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c88(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinc() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c90);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c91(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedec() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c93);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c94(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegte() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c95) {
                    s7 = peg$c95;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c96);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c97(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegt() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s7 = peg$c98;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c99);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselte() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c101) {
                    s7 = peg$c101;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c102);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c103(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselt() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s7 = peg$c104;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c105);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c106(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseequal() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c107) {
                    s7 = peg$c107;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c108);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c109(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenotequal() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c110) {
                    s7 = peg$c110;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c111);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c112(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsexor() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c113) {
                    s7 = peg$c113;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c114);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c115(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseand() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c116) {
                    s7 = peg$c116;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c117);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c118(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseor() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c119) {
                    s7 = peg$c119;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c120);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c121(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseadd() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s7 = peg$c122;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c123);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c124(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s7 = peg$c125;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c126);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c127(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemul() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s7 = peg$c128;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c129);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c130(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsediv() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s7 = peg$c131;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c132);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c133(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemod() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;
      let s6;
      let s7;
      let s8;
      let s9;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseASSIGN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaces();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s7 = peg$c134;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c135);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseValue();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c136(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIoInstruction() {
      let s0;

      s0 = peg$parseiowrite();
      if (s0 === peg$FAILED) {
        s0 = peg$parseioread();
        if (s0 === peg$FAILED) {
          s0 = peg$parseiomode();
          if (s0 === peg$FAILED) {
            s0 = peg$parseiotype();
            if (s0 === peg$FAILED) {
              s0 = peg$parseioallout();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseiowrite() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c138);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePin();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIoValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c139(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseioread() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c141);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePin();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIoValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c142(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseiomode() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c144);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePin();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePinMode();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c145(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseiotype() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c147);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePin();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSeparator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDigit();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c148(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseioallout() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c149) {
        s1 = peg$c149;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c150);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c151();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIoValue() {
      let s0;

      s0 = peg$parseByteValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifierValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBooleanValue();
        }
      }

      return s0;
    }

    function peg$parseWifiInstruction() {
      let s0;

      s0 = peg$parsewificonnect();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewifidisconnect();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewifistatus();
          if (s0 === peg$FAILED) {
            s0 = peg$parsewifilist();
          }
        }
      }

      return s0;
    }

    function peg$parsewificonnect() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c152) {
        s1 = peg$c152;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c153);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStringValue();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSeparator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseStringValue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c154(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewifidisconnect() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c155) {
        s1 = peg$c155;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c156);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c157();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewifistatus() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c160();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewifilist() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c161) {
        s1 = peg$c161;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c162);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c163();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseI2cInstruction() {
      let s0;

      s0 = peg$parsei2setup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsei2start();
        if (s0 === peg$FAILED) {
          s0 = peg$parsei2stop();
          if (s0 === peg$FAILED) {
            s0 = peg$parsei2write();
            if (s0 === peg$FAILED) {
              s0 = peg$parsei2read();
              if (s0 === peg$FAILED) {
                s0 = peg$parsei2setack();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsei2getack();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsei2find();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsei2writeack();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsei2writeack_b();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsei2setup() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c166();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2start() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c167) {
        s1 = peg$c167;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c168);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c169();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2stop() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c172();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2write() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c173) {
        s1 = peg$c173;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c174);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c175();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2read() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c177);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c178();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2setack() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c179) {
        s1 = peg$c179;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c180);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2getack() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c184();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2find() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c186);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2writeack() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c189);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c190();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsei2writeack_b() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c191) {
        s1 = peg$c191;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c192);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c193();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHexDigit() {
      let s0;
      let s1;

      peg$silentFails++;
      if (peg$c195.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c196);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c194);
        }
      }

      return s0;
    }

    function peg$parseHexByte() {
      let s0;
      let s1;
      let s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexDigit();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c198();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }

      return s0;
    }

    function peg$parseByte() {
      let s0;
      let s1;
      let s2;
      let s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseHexDigit();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c202();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c199);
        }
      }

      return s0;
    }

    function peg$parseSpace() {
      let s0;

      if (peg$c203.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c204);
        }
      }

      return s0;
    }

    function peg$parseSpaces() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseSpace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseSpace();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c205);
        }
      }

      return s0;
    }

    function peg$parseNewLine() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c207.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c208);
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c207.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c208);
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c206);
        }
      }

      return s0;
    }

    function peg$parseSeparator() {
      let s0;
      let s1;
      let s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c210;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c211);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c209);
        }
      }

      return s0;
    }

    function peg$parseDigit() {
      let s0;
      let s1;

      peg$silentFails++;
      if (peg$c213.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c214);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c212);
        }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      let s0;
      let s1;

      peg$silentFails++;
      if (peg$c216.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c217);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c215);
        }
      }

      return s0;
    }

    function peg$parseAlpha() {
      let s0;
      let s1;

      peg$silentFails++;
      if (peg$c219.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c220);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c218);
        }
      }

      return s0;
    }

    function peg$parseAlphanumeric() {
      let s0;
      let s1;

      peg$silentFails++;
      if (peg$c219.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c220);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c221);
        }
      }

      return s0;
    }

    function peg$parsePinMode() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c223.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c224);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c225(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c222);
        }
      }

      return s0;
    }

    function peg$parseTrue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c226) {
        s1 = peg$c226;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c227);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 49) {
          s1 = peg$c228;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c229);
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c230();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFalse() {
      let s0;
      let s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c231) {
        s1 = peg$c231;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c232);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c233;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c234);
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c235();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBoolean() {
      let s0;

      s0 = peg$parseTrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFalse();
      }

      return s0;
    }

    function peg$parseInteger() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c233;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c234);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c235();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseSpace();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDigit();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseSpace();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDigit();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c237();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c236);
        }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      let s0;
      let s1;
      let s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c125;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c126);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c238(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseString() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c240;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c241);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c240;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c241);
          }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c242);
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c240;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c241);
            }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c242);
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c240;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c241);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c243(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c239);
        }
      }

      return s0;
    }

    function peg$parseAddress() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;
      let s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexByte();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseHexByte();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHexByte();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseHexByte();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c245(s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c244);
        }
      }

      return s0;
    }

    function peg$parsePin() {
      let s0;
      let s1;
      let s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c247) {
        s1 = peg$c247;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c248);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c249) {
            s2 = peg$c249;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c250);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c251) {
              s2 = peg$c251;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c252);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c253) {
                s2 = peg$c253;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c254);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c255) {
                  s2 = peg$c255;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c256);
                  }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c257) {
                    s2 = peg$c257;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c258);
                    }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c259) {
                      s2 = peg$c259;
                      peg$currPos += 2;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c260);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c261(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c246);
        }
      }

      return s0;
    }

    function peg$parseLabel() {
      let s0;
      let s1;
      let s2;
      let s3;

      s0 = peg$currPos;
      if (peg$c262.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c263);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c264.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c265);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c264.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c265);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c198();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDefineLabel() {
      let s0;
      let s1;
      let s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c266;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c267);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLabel();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c268(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      let s0;
      let s1;
      let s2;
      let s3;
      let s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c270;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c271);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierChar();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseIdentifierChar();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseIdentifierChar();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c272(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c269);
        }
      }

      return s0;
    }

    function peg$parseIdentifierChar() {
      let s0;

      s0 = peg$parseAlphanumeric();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c270;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c271);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c273;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c274);
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifierValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c275(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePinValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parsePin();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c276(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBooleanValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseBoolean();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c277(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseByteValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseByte();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c278(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsePinValue();
      }

      return s0;
    }

    function peg$parseAddressValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseAddress();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c279(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIntegerValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseInteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c280(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSignedIntegerValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseSignedInteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c281(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumberValue() {
      let s0;

      s0 = peg$parseIntegerValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSignedIntegerValue();
      }

      return s0;
    }

    function peg$parseStringValue() {
      let s0;
      let s1;

      s0 = peg$currPos;
      s1 = peg$parseString();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c282(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValue() {
      let s0;
      let s1;

      peg$silentFails++;
      s0 = peg$parseIdentifierValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAddressValue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringValue();
            if (s0 === peg$FAILED) {
              s0 = peg$parseByteValue();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBooleanValue();
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c283);
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
      );
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  };
  return module.exports as peg.Parser;
}
