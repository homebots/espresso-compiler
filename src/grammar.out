/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Program: peg$parseProgram },
      peg$startRuleFunction  = peg$parseProgram,

      peg$c0 = function(c) { return c },
      peg$c1 = peg$otherExpectation("statement"),
      peg$c2 = peg$otherExpectation("comment"),
      peg$c3 = "//",
      peg$c4 = peg$literalExpectation("//", false),
      peg$c5 = /^[^\n]/,
      peg$c6 = peg$classExpectation(["\n"], true, false),
      peg$c7 = function() { return [] },
      peg$c8 = peg$otherExpectation("system instruction"),
      peg$c9 = "delay",
      peg$c10 = peg$literalExpectation("delay", false),
      peg$c11 = function(delay) { return [OpCodes.Delay, ...delay]; },
      peg$c12 = "sleep",
      peg$c13 = peg$literalExpectation("sleep", false),
      peg$c14 = function(delay) { return [OpCodes.Sleep, ...delay]; },
      peg$c15 = "halt",
      peg$c16 = peg$literalExpectation("halt", false),
      peg$c17 = function() { return [OpCodes.Halt]; },
      peg$c18 = "restart",
      peg$c19 = peg$literalExpectation("restart", false),
      peg$c20 = function() { return [OpCodes.Restart]; },
      peg$c21 = "noop",
      peg$c22 = peg$literalExpectation("noop", false),
      peg$c23 = function() { return [OpCodes.Noop]; },
      peg$c24 = "jump",
      peg$c25 = peg$literalExpectation("jump", false),
      peg$c26 = "to",
      peg$c27 = peg$literalExpectation("to", false),
      peg$c28 = function(address) { return [OpCodes.JumpTo, ...address]; },
      peg$c29 = function(t) { return [OpCodes.JumpTo, _.createPlaceholder(t), 0x00, 0x00, 0x00] },
      peg$c30 = "if",
      peg$c31 = peg$literalExpectation("if", false),
      peg$c32 = "then",
      peg$c33 = peg$literalExpectation("then", false),
      peg$c34 = function(condition, label) { return [OpCodes.JumpIf, ...condition, _.createPlaceholder(label), 0x00, 0x00, 0x00] },
      peg$c35 = "yield",
      peg$c36 = peg$literalExpectation("yield", false),
      peg$c37 = function(delay) { return [OpCodes.Yield, ...delay]; },
      peg$c38 = "sysinfo",
      peg$c39 = peg$literalExpectation("sysinfo", false),
      peg$c40 = function() { return [OpCodes.SystemInfo]; },
      peg$c41 = "debug",
      peg$c42 = peg$literalExpectation("debug", false),
      peg$c43 = function(byte) { return [OpCodes.Debug, byte]; },
      peg$c44 = "dump",
      peg$c45 = peg$literalExpectation("dump", false),
      peg$c46 = function() { return [OpCodes.Dump]; },
      peg$c47 = "print",
      peg$c48 = peg$literalExpectation("print", false),
      peg$c49 = function(value) { return [OpCodes.Print, ...value]; },
      peg$c50 = /^[a-zA-Z]/,
      peg$c51 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c52 = /^[a-zA-Z0-9_]/,
      peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
      peg$c54 = function() { return text() },
      peg$c55 = "@",
      peg$c56 = peg$literalExpectation("@", false),
      peg$c57 = function(label) { return _.createReference(label); },
      peg$c58 = "var",
      peg$c59 = peg$literalExpectation("var", false),
      peg$c60 = function(t) { return T.DeclareIdentifier.create(t) },
      peg$c61 = "memget",
      peg$c62 = peg$literalExpectation("memget", false),
      peg$c63 = function() { return [0x05]; },
      peg$c64 = "memset",
      peg$c65 = peg$literalExpectation("memset", false),
      peg$c66 = function() { return [0x06]; },
      peg$c67 = "copy",
      peg$c68 = peg$literalExpectation("copy", false),
      peg$c69 = function() { return [0x1b]; },
      peg$c70 = "not",
      peg$c71 = peg$literalExpectation("not", false),
      peg$c72 = function(target, value) { return [0x13, target, value]; },
      peg$c73 = "gte",
      peg$c74 = peg$literalExpectation("gte", false),
      peg$c75 = function() { return [0x0a]; },
      peg$c76 = "gt",
      peg$c77 = peg$literalExpectation("gt", false),
      peg$c78 = function() { return [0x09]; },
      peg$c79 = "lte",
      peg$c80 = peg$literalExpectation("lte", false),
      peg$c81 = function() { return [0x0c]; },
      peg$c82 = "lt",
      peg$c83 = peg$literalExpectation("lt", false),
      peg$c84 = function() { return [0x0b]; },
      peg$c85 = "equal",
      peg$c86 = peg$literalExpectation("equal", false),
      peg$c87 = function() { return [0x0d]; },
      peg$c88 = "notequal",
      peg$c89 = peg$literalExpectation("notequal", false),
      peg$c90 = function() { return [0x0e]; },
      peg$c91 = "xor",
      peg$c92 = peg$literalExpectation("xor", false),
      peg$c93 = function() { return [0x10]; },
      peg$c94 = "and",
      peg$c95 = peg$literalExpectation("and", false),
      peg$c96 = function() { return [0x11]; },
      peg$c97 = "or",
      peg$c98 = peg$literalExpectation("or", false),
      peg$c99 = function() { return [0x12]; },
      peg$c100 = "inc",
      peg$c101 = peg$literalExpectation("inc", false),
      peg$c102 = function() { return [0x14]; },
      peg$c103 = "dec",
      peg$c104 = peg$literalExpectation("dec", false),
      peg$c105 = function() { return [0x15]; },
      peg$c106 = "add",
      peg$c107 = peg$literalExpectation("add", false),
      peg$c108 = function() { return [0x16]; },
      peg$c109 = "sub",
      peg$c110 = peg$literalExpectation("sub", false),
      peg$c111 = function() { return [0x17]; },
      peg$c112 = "mul",
      peg$c113 = peg$literalExpectation("mul", false),
      peg$c114 = function() { return [0x18]; },
      peg$c115 = "div",
      peg$c116 = peg$literalExpectation("div", false),
      peg$c117 = function() { return [0x19]; },
      peg$c118 = "mod",
      peg$c119 = peg$literalExpectation("mod", false),
      peg$c120 = function() { return [0x1a]; },
      peg$c121 = "io write",
      peg$c122 = peg$literalExpectation("io write", false),
      peg$c123 = function() { return [0x31]; },
      peg$c124 = "io read",
      peg$c125 = peg$literalExpectation("io read", false),
      peg$c126 = function() { return [0x32]; },
      peg$c127 = "io mode",
      peg$c128 = peg$literalExpectation("io mode", false),
      peg$c129 = function() { return [0x35]; },
      peg$c130 = "io type",
      peg$c131 = peg$literalExpectation("io type", false),
      peg$c132 = function() { return [0x36]; },
      peg$c133 = "io allout",
      peg$c134 = peg$literalExpectation("io allout", false),
      peg$c135 = function() { return [0x37]; },
      peg$c136 = "net connect",
      peg$c137 = peg$literalExpectation("net connect", false),
      peg$c138 = function(net, pwd) { return [0x3a, ...net, ...pwd]; },
      peg$c139 = "net disconnect",
      peg$c140 = peg$literalExpectation("net disconnect", false),
      peg$c141 = function() { return [0x3b]; },
      peg$c142 = "net status",
      peg$c143 = peg$literalExpectation("net status", false),
      peg$c144 = function() { return [0x3c]; },
      peg$c145 = "net list",
      peg$c146 = peg$literalExpectation("net list", false),
      peg$c147 = function() { return [0x3e]; },
      peg$c148 = "i2setup",
      peg$c149 = peg$literalExpectation("i2setup", false),
      peg$c150 = function() { return [0x40]; },
      peg$c151 = "i2start",
      peg$c152 = peg$literalExpectation("i2start", false),
      peg$c153 = function() { return [0x41]; },
      peg$c154 = "i2stop",
      peg$c155 = peg$literalExpectation("i2stop", false),
      peg$c156 = function() { return [0x42]; },
      peg$c157 = "i2write",
      peg$c158 = peg$literalExpectation("i2write", false),
      peg$c159 = function() { return [0x43]; },
      peg$c160 = "i2read",
      peg$c161 = peg$literalExpectation("i2read", false),
      peg$c162 = function() { return [0x44]; },
      peg$c163 = "i2setack",
      peg$c164 = peg$literalExpectation("i2setack", false),
      peg$c165 = function() { return [0x45]; },
      peg$c166 = "i2getack",
      peg$c167 = peg$literalExpectation("i2getack", false),
      peg$c168 = function() { return [0x46]; },
      peg$c169 = "i2find",
      peg$c170 = peg$literalExpectation("i2find", false),
      peg$c171 = function() { return [0x48]; },
      peg$c172 = "i2writeack",
      peg$c173 = peg$literalExpectation("i2writeack", false),
      peg$c174 = function() { return [0x49]; },
      peg$c175 = "i2writeack_b",
      peg$c176 = peg$literalExpectation("i2writeack_b", false),
      peg$c177 = function() { return [0x4a]; },
      peg$c178 = peg$otherExpectation("hexadecimal"),
      peg$c179 = /^[0-9A-Fa-f]/,
      peg$c180 = peg$classExpectation([["0", "9"], ["A", "F"], ["a", "f"]], false, false),
      peg$c181 = peg$otherExpectation("HexByte"),
      peg$c182 = peg$otherExpectation("Byte"),
      peg$c183 = function() { return parseInt(text(), 16) },
      peg$c184 = /^[ \t]/,
      peg$c185 = peg$classExpectation([" ", "\t"], false, false),
      peg$c186 = peg$otherExpectation("space"),
      peg$c187 = peg$otherExpectation("new line"),
      peg$c188 = /^[\n]/,
      peg$c189 = peg$classExpectation(["\n"], false, false),
      peg$c190 = peg$otherExpectation("separator"),
      peg$c191 = ",",
      peg$c192 = peg$literalExpectation(",", false),
      peg$c193 = peg$otherExpectation("0..9"),
      peg$c194 = /^[0-9]/,
      peg$c195 = peg$classExpectation([["0", "9"]], false, false),
      peg$c196 = peg$otherExpectation("1..9"),
      peg$c197 = /^[1-9]/,
      peg$c198 = peg$classExpectation([["1", "9"]], false, false),
      peg$c199 = peg$otherExpectation("a-z"),
      peg$c200 = /^[a-z]/i,
      peg$c201 = peg$classExpectation([["a", "z"]], false, true),
      peg$c202 = peg$otherExpectation("a-z or 0-9"),
      peg$c203 = peg$otherExpectation("pin mode"),
      peg$c204 = /^[0-3]/,
      peg$c205 = peg$classExpectation([["0", "3"]], false, false),
      peg$c206 = function(mode) { return Number(mode) },
      peg$c207 = "true",
      peg$c208 = peg$literalExpectation("true", false),
      peg$c209 = function() { return 1 },
      peg$c210 = "false",
      peg$c211 = peg$literalExpectation("false", false),
      peg$c212 = function() { return 0 },
      peg$c213 = peg$otherExpectation("integer"),
      peg$c214 = "0",
      peg$c215 = peg$literalExpectation("0", false),
      peg$c216 = function() { return parseInt(text()) },
      peg$c217 = "-",
      peg$c218 = peg$literalExpectation("-", false),
      peg$c219 = function(int) { return -1 * int },
      peg$c220 = peg$otherExpectation("string"),
      peg$c221 = "'",
      peg$c222 = peg$literalExpectation("'", false),
      peg$c223 = peg$anyExpectation(),
      peg$c224 = function(string) { return string.map(s => s[1]) },
      peg$c225 = peg$otherExpectation("address"),
      peg$c226 = "0x",
      peg$c227 = peg$literalExpectation("0x", false),
      peg$c228 = function(a, b, c, d) { return [d, c, b, a] },
      peg$c229 = peg$otherExpectation("pin"),
      peg$c230 = "pin ",
      peg$c231 = peg$literalExpectation("pin ", false),
      peg$c232 = "10",
      peg$c233 = peg$literalExpectation("10", false),
      peg$c234 = "11",
      peg$c235 = peg$literalExpectation("11", false),
      peg$c236 = "12",
      peg$c237 = peg$literalExpectation("12", false),
      peg$c238 = "13",
      peg$c239 = peg$literalExpectation("13", false),
      peg$c240 = "14",
      peg$c241 = peg$literalExpectation("14", false),
      peg$c242 = "15",
      peg$c243 = peg$literalExpectation("15", false),
      peg$c244 = function(pin) { return Number(pin) },
      peg$c245 = peg$otherExpectation("identifier"),
      peg$c246 = "$",
      peg$c247 = peg$literalExpectation("$", false),
      peg$c248 = function(head, tail) { return text(); },
      peg$c249 = "_",
      peg$c250 = peg$literalExpectation("_", false),
      peg$c251 = function(name) { return T.IdentifierValue.create(name) },
      peg$c252 = function(pin) { return T.PinValue.create(pin) },
      peg$c253 = function(byte) { return T.ByteValue.create(byte) },
      peg$c254 = function(address) { return T.AddressValue.create(address) },
      peg$c255 = function(number) { return T.IntegerValue.create(number) },
      peg$c256 = function(number) { return T.SignedIntegerValue.create(number) },
      peg$c257 = function(string) { return T.StringValue.create(string) },
      peg$c258 = peg$otherExpectation("identifier, address or IO pin"),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseProgram() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLine();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseLine();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLine() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSpaces();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStatement();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNewLine();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s2 = peg$c3;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$c5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c5.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDefineLabel();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSystemInstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMemoryInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOperator();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIoInstruction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseWifiInstruction();
              if (s0 === peg$FAILED) {
                s0 = peg$parseI2cInstruction();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseComment();
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parseSystemInstruction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsehalt();
    if (s0 === peg$FAILED) {
      s0 = peg$parserestart();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesysinfo();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedebug();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedump();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenoop();
              if (s0 === peg$FAILED) {
                s0 = peg$parseyield();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseprint();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsejump_to();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsejumpif();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsedelay();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDeclareVar();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parsedelay() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIntegerValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIntegerValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsehalt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parserestart() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenoop() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsejump_to() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s3 = peg$c26;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAddressValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c28(s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c26) {
            s3 = peg$c26;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLabel();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsejumpif() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSpaces();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c32) {
              s5 = peg$c32;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSpaces();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c24) {
                  s7 = peg$c24;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseSpaces();
                  if (s8 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c26) {
                      s9 = peg$c26;
                      peg$currPos += 2;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c27); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseSpaces();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseLabel();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c34(s3, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseyield() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIntegerValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesysinfo() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedebug() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBoolean();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedump() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c46();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprint() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLabel() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c50.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c52.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDefineLabel() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c55;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLabel();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareVar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMemoryInstruction() {
    var s0;

    s0 = peg$parsememget();
    if (s0 === peg$FAILED) {
      s0 = peg$parsememset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecopy();
      }
    }

    return s0;
  }

  function peg$parsememget() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c63();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsememset() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMemoryWriteValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c66();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecopy() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifierValue();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c69();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMemoryWriteValue() {
    var s0;

    s0 = peg$parseAddressValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePinValue();
    }

    return s0;
  }

  function peg$parseOperator() {
    var s0;

    s0 = peg$parsexor();
    if (s0 === peg$FAILED) {
      s0 = peg$parseand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseor();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenot();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinc();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedec();
              if (s0 === peg$FAILED) {
                s0 = peg$parseadd();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesub();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemul();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsediv();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsemod();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsegt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsegte();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parselt();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselte();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseequal();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsenotequal();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenot() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c72(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegte() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsegt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c78();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselte() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c81();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c84();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseequal() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c87();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenotequal() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsexor() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c91) {
      s1 = peg$c91;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c93();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseand() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c94) {
      s1 = peg$c94;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c96();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseor() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseinc() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c102();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedec() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c105();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseadd() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c108();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesub() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c109) {
      s1 = peg$c109;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c111();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemul() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c112) {
      s1 = peg$c112;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c114();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsediv() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c115) {
      s1 = peg$c115;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c117();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemod() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c118) {
      s1 = peg$c118;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c119); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c120();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIoInstruction() {
    var s0;

    s0 = peg$parseiowrite();
    if (s0 === peg$FAILED) {
      s0 = peg$parseioread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseiomode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseiotype();
          if (s0 === peg$FAILED) {
            s0 = peg$parseioallout();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseiowrite() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c121) {
      s1 = peg$c121;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIoValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c123();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseioread() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c124) {
      s1 = peg$c124;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIoValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c126();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiomode() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c127) {
      s1 = peg$c127;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePinMode();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c129();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiotype() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c130) {
      s1 = peg$c130;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDigit();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c132();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseioallout() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c133) {
      s1 = peg$c133;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c135();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIoValue() {
    var s0;

    s0 = peg$parseByteValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIdentifierValue();
    }

    return s0;
  }

  function peg$parseWifiInstruction() {
    var s0;

    s0 = peg$parsewificonnect();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewifidisconnect();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewifistatus();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewifilist();
        }
      }
    }

    return s0;
  }

  function peg$parsewificonnect() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c136) {
      s1 = peg$c136;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStringValue();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSeparator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStringValue();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c138(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewifidisconnect() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c139) {
      s1 = peg$c139;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c141();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewifistatus() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c142) {
      s1 = peg$c142;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c144();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewifilist() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c145) {
      s1 = peg$c145;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c147();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseI2cInstruction() {
    var s0;

    s0 = peg$parsei2setup();
    if (s0 === peg$FAILED) {
      s0 = peg$parsei2start();
      if (s0 === peg$FAILED) {
        s0 = peg$parsei2stop();
        if (s0 === peg$FAILED) {
          s0 = peg$parsei2write();
          if (s0 === peg$FAILED) {
            s0 = peg$parsei2read();
            if (s0 === peg$FAILED) {
              s0 = peg$parsei2setack();
              if (s0 === peg$FAILED) {
                s0 = peg$parsei2getack();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsei2find();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsei2writeack();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsei2writeack_b();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsei2setup() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c148) {
      s1 = peg$c148;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c150();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2start() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c151) {
      s1 = peg$c151;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c153();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2stop() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c154) {
      s1 = peg$c154;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c156();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2write() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c157) {
      s1 = peg$c157;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c159();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2read() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c160) {
      s1 = peg$c160;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c162();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2setack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c163) {
      s1 = peg$c163;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c165();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2getack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c166) {
      s1 = peg$c166;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c168();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2find() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c169) {
      s1 = peg$c169;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c171();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2writeack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c172) {
      s1 = peg$c172;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c173); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c174();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2writeack_b() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c175) {
      s1 = peg$c175;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c177();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexDigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c179.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c180); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }

    return s0;
  }

  function peg$parseHexByte() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }

    return s0;
  }

  function peg$parseByte() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c183();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }

    return s0;
  }

  function peg$parseSpace() {
    var s0;

    if (peg$c184.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c185); }
    }

    return s0;
  }

  function peg$parseSpaces() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSpace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSpace();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }

    return s0;
  }

  function peg$parseNewLine() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c188.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c188.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }

    return s0;
  }

  function peg$parseSeparator() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c191;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }

    return s0;
  }

  function peg$parseDigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c194.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c193); }
    }

    return s0;
  }

  function peg$parseNonZeroDigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c197.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }

    return s0;
  }

  function peg$parseAlpha() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c200.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c201); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }

    return s0;
  }

  function peg$parseAlphanumeric() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c200.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c201); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }

    return s0;
  }

  function peg$parsePinMode() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c204.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c205); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c206(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c207) {
      s1 = peg$c207;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c209();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c210) {
      s1 = peg$c210;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c211); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c212();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBoolean() {
    var s0;

    s0 = peg$parseTrue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFalse();
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c214;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c212();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNonZeroDigit();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseSpace();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseSpace();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDigit();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c216();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c213); }
    }

    return s0;
  }

  function peg$parseSignedInteger() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c217;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseInteger();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c219(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c221;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c221;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c221;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c223); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c221;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c224(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c220); }
    }

    return s0;
  }

  function peg$parseAddress() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c226) {
      s1 = peg$c226;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c227); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseByte();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseByte();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseByte();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseByte();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c228(s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c225); }
    }

    return s0;
  }

  function peg$parsePin() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c230) {
      s1 = peg$c230;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c231); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDigit();
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c232) {
          s2 = peg$c232;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c233); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c234) {
            s2 = peg$c234;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c236) {
              s2 = peg$c236;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c238) {
                s2 = peg$c238;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c239); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c240) {
                  s2 = peg$c240;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c241); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c242) {
                    s2 = peg$c242;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c243); }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c244(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c229); }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c246;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifierChar();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseIdentifierChar();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseIdentifierChar();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c248(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c245); }
    }

    return s0;
  }

  function peg$parseIdentifierChar() {
    var s0;

    s0 = peg$parseAlphanumeric();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c246;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c249;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c250); }
        }
      }
    }

    return s0;
  }

  function peg$parseIdentifierValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c251(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePinValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePin();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c252(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseByteValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseByte();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c253(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsePinValue();
    }

    return s0;
  }

  function peg$parseAddressValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseAddress();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c254(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIntegerValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c255(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSignedIntegerValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSignedInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c256(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumberValue() {
    var s0;

    s0 = peg$parseIntegerValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSignedIntegerValue();
    }

    return s0;
  }

  function peg$parseStringValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseString();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c257(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValue() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseIdentifierValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumberValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAddressValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStringValue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseByteValue();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c258); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
