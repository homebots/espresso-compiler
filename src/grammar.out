/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Program: peg$parseProgram },
      peg$startRuleFunction  = peg$parseProgram,

      peg$c0 = function(c) { return c },
      peg$c1 = peg$otherExpectation("statement"),
      peg$c2 = peg$otherExpectation("comment"),
      peg$c3 = "//",
      peg$c4 = peg$literalExpectation("//", false),
      peg$c5 = /^[^\n]/,
      peg$c6 = peg$classExpectation(["\n"], true, false),
      peg$c7 = function() { return [] },
      peg$c8 = "delay",
      peg$c9 = peg$literalExpectation("delay", false),
      peg$c10 = function(delay) { return [0x02, ..._.numberToInt32(delay)]; },
      peg$c11 = peg$otherExpectation("halt"),
      peg$c12 = "halt",
      peg$c13 = peg$literalExpectation("halt", false),
      peg$c14 = function() { return [0xfe]; },
      peg$c15 = "restart",
      peg$c16 = peg$literalExpectation("restart", false),
      peg$c17 = function() { return [0xfc]; },
      peg$c18 = "noop",
      peg$c19 = peg$literalExpectation("noop", false),
      peg$c20 = function() { return [0x01]; },
      peg$c21 = "sleep",
      peg$c22 = peg$literalExpectation("sleep", false),
      peg$c23 = function(delay) { return [0x3f, ..._.numberToInt32(delay)]; },
      peg$c24 = "jump to",
      peg$c25 = peg$literalExpectation("jump to", false),
      peg$c26 = function(address) { return [0x04, ..._.numberToInt32(address)]; },
      peg$c27 = function(t) { return [0x04, _.createPlaceholder(t), 0x00, 0x00, 0x00] },
      peg$c28 = "yield",
      peg$c29 = peg$literalExpectation("yield", false),
      peg$c30 = function(delay) { return [0xfa, ..._.numberToInt32(delay)]; },
      peg$c31 = "sysinfo",
      peg$c32 = peg$literalExpectation("sysinfo", false),
      peg$c33 = function() { return [0xfd]; },
      peg$c34 = "debug",
      peg$c35 = peg$literalExpectation("debug", false),
      peg$c36 = function(byte) { return [0xfb, byte]; },
      peg$c37 = "dump",
      peg$c38 = peg$literalExpectation("dump", false),
      peg$c39 = function() { return [0xf9]; },
      peg$c40 = "print",
      peg$c41 = peg$literalExpectation("print", false),
      peg$c42 = function(string) { return [0x03, ...string]; },
      peg$c43 = "jumpif",
      peg$c44 = peg$literalExpectation("jumpif", false),
      peg$c45 = function() { return [0x0f]; },
      peg$c46 = peg$otherExpectation("label"),
      peg$c47 = /^[a-zA-Z]/,
      peg$c48 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c49 = /^[a-zA-Z0-9_]/,
      peg$c50 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
      peg$c51 = function() { return text() },
      peg$c52 = peg$otherExpectation("new label"),
      peg$c53 = "@",
      peg$c54 = peg$literalExpectation("@", false),
      peg$c55 = function(label) { return _.createReference(label); },
      peg$c56 = "memget",
      peg$c57 = peg$literalExpectation("memget", false),
      peg$c58 = function() { return [0x05]; },
      peg$c59 = "memset",
      peg$c60 = peg$literalExpectation("memset", false),
      peg$c61 = function() { return [0x06]; },
      peg$c62 = "push_b",
      peg$c63 = peg$literalExpectation("push_b", false),
      peg$c64 = function() { return [0x07]; },
      peg$c65 = "push_i",
      peg$c66 = peg$literalExpectation("push_i", false),
      peg$c67 = function() { return [0x08]; },
      peg$c68 = "copy",
      peg$c69 = peg$literalExpectation("copy", false),
      peg$c70 = function() { return [0x1b]; },
      peg$c71 = "gte",
      peg$c72 = peg$literalExpectation("gte", false),
      peg$c73 = function() { return [0x0a]; },
      peg$c74 = "gt",
      peg$c75 = peg$literalExpectation("gt", false),
      peg$c76 = function() { return [0x09]; },
      peg$c77 = "lte",
      peg$c78 = peg$literalExpectation("lte", false),
      peg$c79 = function() { return [0x0c]; },
      peg$c80 = "lt",
      peg$c81 = peg$literalExpectation("lt", false),
      peg$c82 = function() { return [0x0b]; },
      peg$c83 = "equal",
      peg$c84 = peg$literalExpectation("equal", false),
      peg$c85 = function() { return [0x0d]; },
      peg$c86 = "notequal",
      peg$c87 = peg$literalExpectation("notequal", false),
      peg$c88 = function() { return [0x0e]; },
      peg$c89 = "xor",
      peg$c90 = peg$literalExpectation("xor", false),
      peg$c91 = function() { return [0x10]; },
      peg$c92 = "and",
      peg$c93 = peg$literalExpectation("and", false),
      peg$c94 = function() { return [0x11]; },
      peg$c95 = "or",
      peg$c96 = peg$literalExpectation("or", false),
      peg$c97 = function() { return [0x12]; },
      peg$c98 = "not",
      peg$c99 = peg$literalExpectation("not", false),
      peg$c100 = function(target, operand) { return [0x13, target, operand]; },
      peg$c101 = "inc",
      peg$c102 = peg$literalExpectation("inc", false),
      peg$c103 = function() { return [0x14]; },
      peg$c104 = "dec",
      peg$c105 = peg$literalExpectation("dec", false),
      peg$c106 = function() { return [0x15]; },
      peg$c107 = "add",
      peg$c108 = peg$literalExpectation("add", false),
      peg$c109 = function() { return [0x16]; },
      peg$c110 = "sub",
      peg$c111 = peg$literalExpectation("sub", false),
      peg$c112 = function() { return [0x17]; },
      peg$c113 = "mul",
      peg$c114 = peg$literalExpectation("mul", false),
      peg$c115 = function() { return [0x18]; },
      peg$c116 = "div",
      peg$c117 = peg$literalExpectation("div", false),
      peg$c118 = function() { return [0x19]; },
      peg$c119 = "mod",
      peg$c120 = peg$literalExpectation("mod", false),
      peg$c121 = function() { return [0x1a]; },
      peg$c122 = "io write",
      peg$c123 = peg$literalExpectation("io write", false),
      peg$c124 = function() { return [0x31]; },
      peg$c125 = "io read",
      peg$c126 = peg$literalExpectation("io read", false),
      peg$c127 = function() { return [0x32]; },
      peg$c128 = "io mode",
      peg$c129 = peg$literalExpectation("io mode", false),
      peg$c130 = function() { return [0x35]; },
      peg$c131 = "io type",
      peg$c132 = peg$literalExpectation("io type", false),
      peg$c133 = function() { return [0x36]; },
      peg$c134 = "io allout",
      peg$c135 = peg$literalExpectation("io allout", false),
      peg$c136 = function() { return [0x37]; },
      peg$c137 = "net connect",
      peg$c138 = peg$literalExpectation("net connect", false),
      peg$c139 = function() { return [0x3a]; },
      peg$c140 = "net disconnect",
      peg$c141 = peg$literalExpectation("net disconnect", false),
      peg$c142 = function() { return [0x3b]; },
      peg$c143 = "net status",
      peg$c144 = peg$literalExpectation("net status", false),
      peg$c145 = function() { return [0x3c]; },
      peg$c146 = "wifilist",
      peg$c147 = peg$literalExpectation("wifilist", false),
      peg$c148 = function() { return [0x3e]; },
      peg$c149 = "i2setup",
      peg$c150 = peg$literalExpectation("i2setup", false),
      peg$c151 = function() { return [0x40]; },
      peg$c152 = "i2start",
      peg$c153 = peg$literalExpectation("i2start", false),
      peg$c154 = function() { return [0x41]; },
      peg$c155 = "i2stop",
      peg$c156 = peg$literalExpectation("i2stop", false),
      peg$c157 = function() { return [0x42]; },
      peg$c158 = "i2write",
      peg$c159 = peg$literalExpectation("i2write", false),
      peg$c160 = function() { return [0x43]; },
      peg$c161 = "i2read",
      peg$c162 = peg$literalExpectation("i2read", false),
      peg$c163 = function() { return [0x44]; },
      peg$c164 = "i2setack",
      peg$c165 = peg$literalExpectation("i2setack", false),
      peg$c166 = function() { return [0x45]; },
      peg$c167 = "i2getack",
      peg$c168 = peg$literalExpectation("i2getack", false),
      peg$c169 = function() { return [0x46]; },
      peg$c170 = "i2find",
      peg$c171 = peg$literalExpectation("i2find", false),
      peg$c172 = function() { return [0x48]; },
      peg$c173 = "i2writeack",
      peg$c174 = peg$literalExpectation("i2writeack", false),
      peg$c175 = function() { return [0x49]; },
      peg$c176 = "i2writeack_b",
      peg$c177 = peg$literalExpectation("i2writeack_b", false),
      peg$c178 = function() { return [0x4a]; },
      peg$c179 = peg$otherExpectation("hexadecimal"),
      peg$c180 = /^[0-9A-Fa-f]/,
      peg$c181 = peg$classExpectation([["0", "9"], ["A", "F"], ["a", "f"]], false, false),
      peg$c182 = peg$otherExpectation("integer"),
      peg$c183 = /^[1-9]/,
      peg$c184 = peg$classExpectation([["1", "9"]], false, false),
      peg$c185 = /^[0-9]/,
      peg$c186 = peg$classExpectation([["0", "9"]], false, false),
      peg$c187 = function() { return Number(text()) },
      peg$c188 = peg$otherExpectation("string"),
      peg$c189 = "'",
      peg$c190 = peg$literalExpectation("'", false),
      peg$c191 = peg$anyExpectation(),
      peg$c192 = function(string) { return _.toBinaryString(string.map(s => s[1])) },
      peg$c193 = peg$otherExpectation("space"),
      peg$c194 = /^[ \t]/,
      peg$c195 = peg$classExpectation([" ", "\t"], false, false),
      peg$c196 = peg$otherExpectation("new line"),
      peg$c197 = /^[\n]/,
      peg$c198 = peg$classExpectation(["\n"], false, false),
      peg$c199 = peg$otherExpectation("HexByte"),
      peg$c200 = peg$otherExpectation("Byte"),
      peg$c201 = function() { return _.bytesFromHex(text()) },
      peg$c202 = peg$otherExpectation("separator"),
      peg$c203 = ",",
      peg$c204 = peg$literalExpectation(",", false),
      peg$c205 = peg$otherExpectation("0..9"),
      peg$c206 = peg$otherExpectation("pin mode"),
      peg$c207 = /^[0-3]/,
      peg$c208 = peg$classExpectation([["0", "3"]], false, false),
      peg$c209 = function(mode) { return Number(mode) },
      peg$c210 = peg$otherExpectation("variable"),
      peg$c211 = "#",
      peg$c212 = peg$literalExpectation("#", false),
      peg$c213 = function(d) { return Number(d) },
      peg$c214 = peg$otherExpectation("address"),
      peg$c215 = "0x",
      peg$c216 = peg$literalExpectation("0x", false),
      peg$c217 = function(a, b, c, d) { return _.int32ToNumber([d, c, b, a]) },
      peg$c218 = peg$otherExpectation("pin"),
      peg$c219 = "pin ",
      peg$c220 = peg$literalExpectation("pin ", false),
      peg$c221 = function(pin) { return Number(pin) },
      peg$c222 = peg$otherExpectation("operand"),
      peg$c223 = "true",
      peg$c224 = peg$literalExpectation("true", false),
      peg$c225 = function() { return 1 },
      peg$c226 = "false",
      peg$c227 = peg$literalExpectation("false", false),
      peg$c228 = function() { return 0 },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseProgram() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLine();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseLine();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLine() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSpaces();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStatement();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNewLine();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s2 = peg$c3;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$c5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c5.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDefineTag();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSystemInstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMemoryInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOperator();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIoInstruction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseWifiInstruction();
              if (s0 === peg$FAILED) {
                s0 = peg$parseI2cInstruction();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseComment();
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parseSystemInstruction() {
    var s0;

    s0 = peg$parsehalt();
    if (s0 === peg$FAILED) {
      s0 = peg$parserestart();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesysinfo();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedebug();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedump();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenoop();
              if (s0 === peg$FAILED) {
                s0 = peg$parseyield();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseprint();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsejump_to();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsejumpif();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsedelay();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsesleep();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedelay() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehalt() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parserestart() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenoop() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesleep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejump_to() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAddress();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLabel();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseyield() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesysinfo() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedebug() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBoolean();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedump() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprint() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseString();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejumpif() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c45();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLabel() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c47.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c49.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c49.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parseDefineTag() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLabel();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parseMemoryInstruction() {
    var s0;

    s0 = peg$parsememget();
    if (s0 === peg$FAILED) {
      s0 = peg$parsememset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepush_b();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepush_i();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecopy();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsememget() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c58();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsememset() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c61();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepush_b() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c64();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepush_i() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c67();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecopy() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c70();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOperator() {
    var s0;

    s0 = peg$parsexor();
    if (s0 === peg$FAILED) {
      s0 = peg$parseand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseor();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenot();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinc();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedec();
              if (s0 === peg$FAILED) {
                s0 = peg$parseadd();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesub();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemul();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsediv();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsemod();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsegt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsegte();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parselt();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselte();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseequal();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsenotequal();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegte() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsegt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c75); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c76();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselte() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c77) {
      s1 = peg$c77;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c79();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c82();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseequal() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c85();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenotequal() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c87); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c88();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsexor() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c91();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseand() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c94();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseor() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c97();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenot() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c98) {
      s1 = peg$c98;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOperand();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c100(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinc() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c101) {
      s1 = peg$c101;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedec() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c106();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseadd() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c109();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesub() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c110) {
      s1 = peg$c110;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c112();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemul() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c113) {
      s1 = peg$c113;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c115();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsediv() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c116) {
      s1 = peg$c116;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemod() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c119) {
      s1 = peg$c119;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c121();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIoInstruction() {
    var s0;

    s0 = peg$parseiowrite();
    if (s0 === peg$FAILED) {
      s0 = peg$parseioread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseiomode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseiotype();
          if (s0 === peg$FAILED) {
            s0 = peg$parseioallout();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseiowrite() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c122) {
      s1 = peg$c122;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOperand();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c124();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseioread() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c125) {
      s1 = peg$c125;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOperand();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c127();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiomode() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c128) {
      s1 = peg$c128;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePinMode();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c130();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiotype() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c131) {
      s1 = peg$c131;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePin();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDigit();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c133();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseioallout() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c134) {
      s1 = peg$c134;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c136();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWifiInstruction() {
    var s0;

    s0 = peg$parsewificonnect();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewifidisconnect();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewifistatus();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewifilist();
        }
      }
    }

    return s0;
  }

  function peg$parsewificonnect() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c137) {
      s1 = peg$c137;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c139();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewifidisconnect() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c140) {
      s1 = peg$c140;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c142();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewifistatus() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c143) {
      s1 = peg$c143;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c145();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewifilist() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c146) {
      s1 = peg$c146;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c148();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseI2cInstruction() {
    var s0;

    s0 = peg$parsei2setup();
    if (s0 === peg$FAILED) {
      s0 = peg$parsei2start();
      if (s0 === peg$FAILED) {
        s0 = peg$parsei2stop();
        if (s0 === peg$FAILED) {
          s0 = peg$parsei2write();
          if (s0 === peg$FAILED) {
            s0 = peg$parsei2read();
            if (s0 === peg$FAILED) {
              s0 = peg$parsei2setack();
              if (s0 === peg$FAILED) {
                s0 = peg$parsei2getack();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsei2find();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsei2writeack();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsei2writeack_b();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsei2setup() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c149) {
      s1 = peg$c149;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c151();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2start() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c152) {
      s1 = peg$c152;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c154();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2stop() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c155) {
      s1 = peg$c155;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c157();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2write() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c158) {
      s1 = peg$c158;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c159); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2read() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c161) {
      s1 = peg$c161;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c163();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2setack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c164) {
      s1 = peg$c164;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c166();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2getack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c167) {
      s1 = peg$c167;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c168); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c169();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2find() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c170) {
      s1 = peg$c170;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c171); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c172();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2writeack() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c173) {
      s1 = peg$c173;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c175();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsei2writeack_b() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c176) {
      s1 = peg$c176;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c177); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c178();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexDigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c180.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c183.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c185.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c185.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c186); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c189;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c189;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c189;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c191); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c189;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c192(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }

    return s0;
  }

  function peg$parseSpaces() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c194.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c194.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c195); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c193); }
    }

    return s0;
  }

  function peg$parseNewLine() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c197.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c197.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }

    return s0;
  }

  function peg$parseHexByte() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }

    return s0;
  }

  function peg$parseByte() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexDigit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHexDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c201();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }

    return s0;
  }

  function peg$parseSeparator() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c203;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaces();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }

    return s0;
  }

  function peg$parseDigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c185.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c205); }
    }

    return s0;
  }

  function peg$parsePinMode() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c207.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c209(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c211;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c212); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c213(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }

    return s0;
  }

  function peg$parseAddress() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c215) {
      s1 = peg$c215;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseByte();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseByte();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseByte();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseByte();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c217(s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }

    return s0;
  }

  function peg$parsePin() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c219) {
      s1 = peg$c219;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c220); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDigit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c221(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }

    return s0;
  }

  function peg$parseOperand() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAddress();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePin();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c223) {
      s1 = peg$c223;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c224); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c225();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c226) {
      s1 = peg$c226;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c227); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c228();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBoolean() {
    var s0;

    s0 = peg$parseTrue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFalse();
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
